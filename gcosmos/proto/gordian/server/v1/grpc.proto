syntax = "proto3";

option go_package = "github.com/rollchains/gordian/gcosmos/gserver/internal/ggrpc";

package gordian.server.v1;

service GordianGRPC {
    // GetBlocksWatermark returns the current block information.
    rpc GetBlocksWatermark(CurrentBlockRequest) returns (CurrentBlockResponse) {}

    // (DEBUG) SubmitTransaction submits a transaction to the network.
    // rpc SubmitTransaction(SubmitTransactionRequest) returns (TxResultResponse) {} // Now SubmitTransactionSync
    // (DEBUG) SimulateTransaction submits and simulates a transaction.
    rpc SimulateTransaction(SubmitSimulationTransactionRequest) returns (TxResultResponse) {} // TODO: use proper resp
    // rpc SimulateTransaction(SubmitSimulationTransactionRequest) returns (TxResult) {} // TODO: use proper resp
    // (DEBUG) PendingTransactions returns the pending transactions in JSON form.
    rpc PendingTransactions(PendingTransactionsRequest) returns (PendingTransactionsResponse) {}
    // (DEBUG) QueryAccountBalance returns the balance of an account.
    rpc QueryAccountBalance(QueryAccountBalanceRequest) returns (QueryAccountBalanceResponse) {}

    rpc QueryTransaction(QueryTransactionRequest) returns (TxResultResponse) {}

    // IBC stuff
    rpc GetBlock(GetBlockRequest) returns (GetBlockResponse) {}
    rpc GetStatus(GetStatusRequest) returns (GetStatusResponse) {}
    rpc GetBlockResults(GetBlockResultsRequest) returns (BlockResults) {}
    rpc GetValidators(GetValidatorsRequest) returns (GetValidatorsResponse) {}


    rpc SubmitTransactionSync(DoBroadcastTxSyncRequest) returns (TxResultResponse) {}
    rpc GetABCIQuery(GetABCIQueryRequest) returns (GetABCIQueryResponse) {}
    rpc GetTxSearch(GetTxSearchRequest) returns (TxResultResponseList) {}

    // TODO:
    // rpc DoBroadcastTxAsync(DoBroadcastTxAsyncRequest) returns (TxResultResponse) {}
    // rpc GetABCIQueryWithOptions(GetABCIQueryWithOptsRequest) returns (gordian.rpc.core.ResultABCIQuery) {} // resp is similat to TxResultResponse
    // rpc GetCommit(GetCommitRequest) returns (gordian.rpc.core.ResultCommit) {}
    // rpc GetBlockSearch(GetBlockSearchRequest) returns (gordian.rpc.core.ResultBlockSearch) {} // TODO:

}

// make TxResult type cosmossdk.io/core/app.TxResult


message GetCommitRequest {
    uint64 height = 1;
}


message GetBlockSearchRequest {
    string query = 1;
    uint64 page = 2;
    uint64 per_page = 3;
    string order_by = 4;
}

message GetBlockRequest {
    uint64 height = 1;
}
message GetBlockResponse {
    uint64 time = 1; // nanoseconds
}

message GetStatusRequest {}
message GetStatusResponse {
    bool catching_up = 1;
    uint64 latest_block_height = 2;
}

// GetBlockResults
message GetBlockResultsRequest {
    uint64 height = 1;
}

// ExecTxResult
message BlockResults {
    uint64 height = 1;
    repeated TxResultResponse txs_results = 2;
    repeated Event finalize_block_events = 3;
    string app_hash = 4;
}

message GetABCIQueryRequest {
    // latest height
    string path = 1;
    bytes data = 2;
}
message GetABCIQueryResponse {
    uint32 code = 1;
    bytes value = 2;
}

message GetABCIQueryWithOptsRequest {
    string path = 1;
    bytes data = 2;

    uint64 height = 3;
    bool prove = 4;
}

message GetTxSearchRequest {
    string query = 1;
    uint64 page = 2;
    uint64 per_page = 3;
    bool prove = 4;
    string order_by = 5;
}

message TxResultResponseList {
    // add pagination
    repeated TxResultResponse txs_results = 1;
}

message DoBroadcastTxSyncRequest {
    bytes tx = 1;
}

message DoBroadcastTxAsyncRequest {
    bytes tx = 1;
}

message GetTxRequest {
    string tx_hash = 1;
    bool prove = 2;
}

// -----------------


message CurrentBlockRequest {}
message CurrentBlockResponse {
    optional uint64 voting_height = 1;
    optional uint32 voting_round = 2;

    optional uint64 committing_height = 3;
    optional uint32 committing_round = 4;
}

message Validator {
    bytes encoded_pub_key = 1;
    uint64 power = 2;
}
message GetValidatorsRequest {}
message GetValidatorsResponse {
    optional uint64 finalization_height = 1;
    repeated Validator validators = 2;
}

message SubmitTransactionRequest {
    bytes tx = 1;
}

message SubmitSimulationTransactionRequest {
    bytes tx = 1;
}

message PendingTransactionsRequest {}

message PendingTransactionsResponse {
    // json encoded transactions
    repeated bytes txs = 1;
}

// cosmos-sdk/core/app/app.go#TxResult
// TODO: import this directly from the SDK? or use our own?
message TxResultResponse {
    repeated Event events = 1 [json_name="events"];
    // bytes resp = 2; //  []transaction.Msg
    string error = 3 [json_name="error"];
    uint32 code = 4 [json_name="code"];
    bytes data = 5 [json_name="data"];
    string log = 6 [json_name="log"];
    string info = 7 [json_name="info"];
    uint64 gas_wanted = 8 [json_name="gas_wanted"];
    uint64 gas_used = 9 [json_name="gas_used"];
    string codespace = 10 [json_name="codespace"];
    string tx_hash = 11 [json_name="tx_hash"];
}

message Event {
    string type = 1;
    repeated EventAttribute attributes = 2;
}

message EventAttribute {
    string key = 1;
    string value = 2;
}



message BalanceResponse {
    string denom = 1;
    string amount = 2;
}
message QueryAccountBalanceRequest {
    string address = 1;
    string denom = 2;
}
message QueryAccountBalanceResponse {
    BalanceResponse balance = 1;
}

message QueryTransactionRequest {
    string tx_hash = 1;
}
